// Generated by CoffeeScript 1.7.1
(function() {
  var Class, should;

  should = require('chai').should();

  Class = require('../class');

  describe('inherits.Class() tests', function() {
    var Circle, Point;
    Point = null;
    Circle = null;
    beforeEach(function() {
      Point = new Class({
        constructor: function(x, y) {
          this.x = x;
          return this.y = y;
        },
        length: function() {
          return Math.sqrt(this.x * this.x + this.y * this.y);
        }
      });
      return Circle = new Class({
        prototype: Point,
        constructor: function(x, y, radius) {
          this._base(x, y);
          return this.radius = radius;
        },
        area: function() {
          return Math.PI * this.radius * this.radius;
        }
      });
    });
    describe('constructor and prototype tests', function() {
      it('should set should set `_base` on constructor', function() {
        return Circle._base.should.equal(Point);
      });
      it('should extend base\'s prototype', function() {
        Circle.prototype.__proto__.should.equal(Point.prototype);
        Circle.prototype.constructor.should.equal(Circle);
        return Circle.prototype._base.should.equal(Point);
      });
      it('should keep own prototype properties.', function() {
        return Circle.prototype.should.include.keys('area');
      });
      it('prototype property should not exist in prototype', function() {
        return Circle.prototype.should.not.include.keys('prototype');
      });
      it('should keep constructor\'s name', function() {
        var A = new Class({ constructor: function A() {}});
        return A.name.should.equal('A');
      });
      return it('should throw exception if no constructor is provided', function() {
        var test;
        test = function() {
          return new Class({});
        };
        return test.should["throw"]();
      });
    });
    return describe('instance tests', function() {
      var circle;
      circle = null;
      beforeEach(function() {
        return circle = new Circle(1, 2, 3);
      });
      it('should be instance of base', function() {
        return circle.should.instanceOf(Point);
      });
      it('should be instance of self', function() {
        return circle.should.instanceOf(Circle);
      });
      it('should construct instance', function() {
        circle.x.should.equal(1);
        circle.y.should.equal(2);
        return circle.radius.should.equal(3);
      });
      it('should have own and inherited methods', function() {
        circle.length().should.equal(Math.sqrt(5));
        return circle.area().should.equal(Math.PI * circle.radius * circle.radius);
      });
      return it('instances should not share prototype fields', function() {
        var anotherCircle;
        anotherCircle = new Circle(3, 4, 5);
        return anotherCircle.should.not.eql(circle);
      });
    });
  });

}).call(this);

//# sourceMappingURL=2.class.tests.map
